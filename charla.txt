Presentación
------------

Python como herramienta de cálculo numérico y procesamiento en tiempo real 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Santiago Piccini <gringotumadre@gmail.com>
* Diego Mascialino <dmascialino@gmail.com>

NumPy y Scipy
-------------

NumPy
~~~~~

* Es un paquete de Python que provee el tipo de dato ``array``. Ofrece muchas
  funciones útiles y optimizadas para el procesamiento de números.


SciPy
~~~~~

* Paquete, que usando NumPy, implementa *muchísimas* funciones.
  Integración, Optimización, Álgebra, Estadística, Procesamiento de Señales, etc.  

Matplotlib
~~~~~~~~~~

* Biblioteca para realizar gráficos 2D.

Un poco de historia
-------------------

.. Desde hace 15 años se utiliza ``Python`` en el ámbito científico.

.. Scipy, como paquete, nació hace 5 años, y junto a Numpy son la evolución de mas 
.. de 15 años de desarrollo

numeric(1995) + numArray(2003)  = Numpy (2005)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

muchos paquete scientificos(1995...) = Scipy(2001)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

foosee.in(2009 -- 2012). U$s 1 x 10^9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Ajuste
------

El objetivo es encontrar los valores que mejor ajustan un módelo a ciertas
mediciones realizadas.

En este ejemplo se buscarán 2 características de un transistor ''Mosfet''

Se utilizará el método ``cuadrados mínimos``.

Cómo obtuve los datos
~~~~~~~~~~~~~~~~~~~~~

En el laboratorio se miden distintas corrientes variando la tensión y se obtiene
una tabla como esta::

    #vgs(V) Id(mA)
    1.5     0.04
    1.6     0.11
        ...
    2.2     19.0
        ...
    2.4     42.5
    2.5     72

Definiendo la familia de funciones
----------------------------------

..  code-block:: python

    def id_vgs(vgs, k, vt):
      """ $I_D = k * (V_{GS} - V_T)^2$ """
      return k * (vgs - vt)**2

    def id_vgs_residuo(p, vgs, id_medida):
      """ Residuo para hallar k y vt
          utilizando cuadrados mínimos """
      k, vt = p
      return id_medida - id_vgs(vgs, k, vt)

Leyendo los datos
-----------------

..  code-block:: python

    from numpy import loadtxt

    # Matriz con las mediciones realizadas
    mediciones = loadtxt('id_vgs.txt')

    # Separo en 2 arrays utiles
    vgs, i_d = mediciones[:,0], mediciones[:,1]

Ajustando
---------

.. code-block:: python

    from scipy.optimize import leastsq

    # Punto desde el que se empieza estimar
    p0 = (100, 1.5)

    k, vt = leastsq(id_vgs_residuo, p0,
                    args=(vgs, i_d))[0]


Mostrando
---------

.. code-block:: python

    from matplotlib import pyplot as plt
    from numpy import arange

    # Grafico los puntos medidos
    plt.plot(vgs, i_d, 'ro-')

    # Grafico la función ajustada
    vmax = vgs.max()
    vs = arange(vt, vmax + 0.2, 0.01)
    plt.plot(vs, id_vgs(vs, k, vt), 'b',linewidth = 2)

Mostrando
---------

.. code-block:: python

    leyenda = ['mediciones']
    leyenda.append(u'Función estimada: $k = %.2f'
    '\\frac{mA}{V^2}$, $V_T = %.3f V$' % (k, vt))
 
    plt.legend(leyenda, loc='upper left')
    # Texto en los ejes
    plt.xlabel('$V_{GS}$ [V]'); plt.ylabel('$I_D$ [mA]')
    plt.grid()

    # Guardar y mostrar
    plt.savefig('ajuste.png')
    plt.show()


Resultado
---------

.. image:: images/ajuste.png
    :scale: 90 %


Procesamiento en tiempo real
----------------------------

* Cómputos correctos + resultados a tiempo
* ¿A tiempo? Dos tipos básicos:

  - Antes de un deadline
  - Dentro de un margen, ni antes ni después

¿Es posible en python?
----------------------

.. (0.5')

.. image:: images/bebe.jpg
    :scale: 120 %
.. http://www.flickr.com/photos/heldes/364911349/sizes/z/in/photostream/

Sí!!!!!
-------

.. http://www.flickr.com/photos/athoos/265329441/ (CC), http://www.flickr.com/photos/jkonig/3061419305/ (CC)



¿Cómo es posible, python no era lento?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. (1')

Clave: Usar las herramientas adecuadas (KISS)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* *Baja FS*, cálculos simples: *pure python*

* Otro: numpy, cython, modulo C o C++

* Audio: numpy + PyAudio o PyJack

* Video: OpenCv + numpy

.. (Mostrar alguna idea con código, con threading por ejemplo.)

.. * TDCxPM: antigravity + soul

stream_grapher
--------------
..  (1')

* Qué es stream_grapher? (http://bitbucket.org/san/stream_grapher)

Un graficador para señales de *tiempo real*

  -  Señales provenientes de

    - serie / COM
    - USB
    - network
    - audio
    - archivos
    - generadas por código

  - Objetivos: Ayudar en el prototipado y desarrollo de hardware,
    filtros digitales y analógicos para medicina, audio, robótica, etc.

¿Cómo surgió?
-------------

.. image:: images/san_exxer.jpeg
    :scale: 65 %


¿Cómo esta hecho?
-----------------

* numpy
* scipy
* pyglet (OpenGL) Uso directo con numpy de *slices* de los arrays de vertices
  en memoria de video. Rapido!

..
    Ejemplo: diseñemos un filtro de audio!
    --------------------------------------

    * backends
    * widgets
    * configuracion/inicializacion en python

    from backends import pyjack
    audio = pyjack.Jack()

    backends = [audio]

    stream_widget = StreamWidget(...)

    fft_widget = FFTWidget(...)

    widgets = [stream_widget, fft_widget]

    PatchBay.connect(src=audio, src_port=1, out=stream_widget)
    PatchBay.connect(src=audio, src_port=2, out=fft_widget)


Ejemplo: diseñemos un filtro de audio!
--------------------------------------
 
Pongamos en la coctelera:
~~~~~~~~~~~~~~~~~~~~~~~~~

* numpy
* scipy
* jack
* stream_grapher


Diseño: scipy al rescate
------------------------
* Diseño de filtros
 
     - ``remez``: Calculate the minimax optimal filter using Remez exchange algorithm.
     - ``firwin``: FIR Filter Design using windowed ideal filter method.
     - **iirdesign**: Complete IIR digital and analog filter design.
     - ``iirfilter``: IIR digital and analog filter design given order and critical points.
     - ``freqs``: Compute frequency response of analog filter.
     - ``freqz``: Compute frequency response of a digital filter.
     - ``unique_roots``: Determine the unique roots and their multiplicities in two lists
     - ``residue``: Compute partial-fraction expansion of b(s) / a(s).
     - ``residuez``: Compute partial-fraction expansion of b(z) / a(z).
     - ``invres``: Compute b(s) and a(s) from partial fraction expansion``: r,p,k
     - ``butter``: Butterworth digital and analog filter design.
     - ``buttord``: Butterworth filter order selection.
     - ``cheby1``: Chebyshev type I digital and analog filter design.
     - ``cheb1ord``: Chebyshev type I filter order selection.
     - ``cheby2``: Chebyshev type I digital and analog filter design.
     - ``cheb2ord``: Chebyshev type II filter order selection.
     - ``ellip``: Elliptic (Cauer) digital and analog filter design.
     - ``ellipord``: Elliptic (Cauer) filter order selection.
     - ``bessel``: Bessel digital and analog filter design.

Al código
---------
.. (1')

..  code-block:: python

    class PasaBajos(object):
       def __init__(self):
          FS = 48000.
          BANDPASS, STOPBAND = 1000., 1500.
          wp, ws = BANDPASS/(FS/2), STOPBAND/(FS/2)
          self.b, self.a = iirdesign(wp=wp, ws=ws,
                                     gpass=0.1, 
                                     gstop=40)
          max_len = max(len(self.a), len(self.b))
          self.z0 = numpy.zeros(max_len-1)

       def do_filter(self, data):
          filt_data, self.z0 = lfilter(self.b,
                                       self.a, 
                                       data,
                                       self.z0)
          return filt_data

Gráfico
-------
.. (0.5')

.. image:: images/imagen_filtro.png
    :scale: 100 %

Obtener el audio
----------------
.. (2')

Patron sencillo: main + thread + Queue
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. image:: images/esquema_filtrado.png
    :scale: 100 %


thread
------

.. Poner mas codigo de thread, inicializacion?

.. code-block:: python

    graph_queue = Queue()

    class SyncThread(Thread):
    # ...
     def run(self):
      filtro = PasaBajos()

      while True:
       jack.process((left_out, rigth_out), (left_in, rigth_in))
       left_out = filtro.do_filter(left_in)
       rigth_out = rigth_in
       graph_queue.put((left_out, rigth_out))

Showtime!
---------
.. (3')
.. corrida con señal de audio limpia y luego filtrada con un pasabajos 


Conclusiones
------------

* Es fácil, rápido y potente

* Es lindo

* Sirve para aprender en nuesrtas Universidades. Contagiémoslo!

* Sirve en nuestros trabajos científicos. Disfrutémoslo!


¿?
--

¿Preguntas?
~~~~~~~~~~~

.. TODO: Imagen 

